DPCRTLMM release 1.1.6b
=======================

A number of POSIX threads deadlocks were eliminated from
DPCRTLMM 1.1.6b  However, one thing can't be stopped and
that's the possible deadlock of callbacks if they call
DPCRTLMM back.  The way DPCRTLMM 1.1.6 has addressed this
is with the use of recursive mutexes (as is default
behaviour of Win32 critical sections).  To support this
under POSIX I have had to use a non-portable extension.
The non-portable POSIX mutex extension is now used by default
when the command

./config --enable-threads

is used on a UNIX platform.
However, as always with non-portable extensions, there are platforms
which cannot support this behaviour.  To use normal POSIX mutexes again
like in DPCRTLMM 1.1.5 configure as thread safe with max porting (a new
switch I have added for this and future use).

./config --enable-threads --maxport

If you do not use the non-portable recursive mutex extension by using
--maxport, you must not call DPCRTLMM from callbacks in the library,
if you do you will deadlock the library.  None of this applies for
Win32 critical sections --maxport currently does nothing on that
platform.

DPCRTLMM_MAXPORT
================
The DPCRTLMM_MAXPORT configuration option set by --maxport to the config
program is a new feature and when this is set I strip anything out of the
code which might even remotely have the possibillty of stopping a compile
working on _any_ platform.  This is a dream goal but here are two of the
first things added to the list which will be prohibited from code running
as maxport:

1) No use of POSIX mutex extensions for deadlock safe callbacks in multithreaded
   programs under UNIX as previously stated.

2) No support for loose files which may not exist on games consoles.